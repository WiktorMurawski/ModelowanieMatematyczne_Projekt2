data = readtable("data_30.csv");
data2 = readtable("query_30.csv");
t_vals = data.t;
x1 = data.x1;
x2 = data.x2;
x3 = data.x3;
y1 = data.y1;
y2 = data.y2;
y3 = data.y3;
TSPAN = data2.t;
N = length(t_vals);

option = 0;
dx1 = ApproximateDerivative(t_vals,x1,option);
dy1 = ApproximateDerivative(t_vals,y1,option);
dx2 = ApproximateDerivative(t_vals,x2,option);
dy2 = ApproximateDerivative(t_vals,y2,option);
dx3 = ApproximateDerivative(t_vals,x3,option);
dy3 = ApproximateDerivative(t_vals,y3,option);

ddx1 = ApproximateDerivative(t_vals,dx1,option);
ddy1 = ApproximateDerivative(t_vals,dy1,option);
ddx2 = ApproximateDerivative(t_vals,dx2,option);
ddy2 = ApproximateDerivative(t_vals,dy2,option);
ddx3 = ApproximateDerivative(t_vals,dx3,option);
ddy3 = ApproximateDerivative(t_vals,dy3,option);

%% Wypisywanie
set(0,'defaultAxesLineStyleOrder',{'-o' '--o' '+'});

c1 = "#0000FF";
c2 = "#FF0000";
c3 = "#FFA000";
figure(1); clf; hold on; 
set(gca,'Color','k')
plot(x1,y1,Color=c1,DisplayName='Body 1',Marker='o');
plot(x2,y2,Color=c2,DisplayName='Body 2',Marker='o');
plot(x3,y3,Color=c3,DisplayName='Body 3',Marker='o');
plot(x1(1),y1(1),Color=c1,DisplayName='Body 1 Start', ...
  Marker="*",MarkerSize=20)
plot(x2(1),y2(1),Color=c2,DisplayName='Body 2 Start', ...
  Marker="*",MarkerSize=20)
plot(x3(1),y3(1),Color=c3,DisplayName='Body 3 Start', ...
  Marker="*",MarkerSize=20)
legend("show",Color="#FFFFFF",Location="southeast")

figure(2); clf;
subplot(3,2,1); hold on; title("x1");
plot(t_vals,x1); plot(t_vals,dx1); plot(t_vals,ddx1); 
subplot(3,2,2); hold on; title("y1");
plot(t_vals,y1); plot(t_vals,dy1); plot(t_vals,ddy1); 
subplot(3,2,3); hold on; title("x2");
plot(t_vals,x2); plot(t_vals,dx2); plot(t_vals,ddx2); 
subplot(3,2,4); hold on; title("y2");
plot(t_vals,y2); plot(t_vals,dy2); plot(t_vals,ddy2); 
subplot(3,2,5); hold on; title("x3");
plot(t_vals,x3); plot(t_vals,dx3); plot(t_vals,ddx3); 
subplot(3,2,6); hold on; title("y3");
plot(t_vals,y3); plot(t_vals,dy3); plot(t_vals,ddy3); 



%% Aproksymacja masy
Gm_mat = zeros(6,N);
for i = 1:N
  r12 = sqrt((x1(i)-x2(i))^2 + (y1(i)-y2(i))^2);
  r13 = sqrt((x1(i)-x3(i))^2 + (y1(i)-y3(i))^2);
  r23 = sqrt((x2(i)-x3(i))^2 + (y2(i)-y3(i))^2);
  Gm_mat(1,i) = ddx1(i) / ((x2(i) - x1(i))/r12^3 + (x3(i) - x1(i))/r13^3);
  Gm_mat(2,i) = ddy1(i) / ((y2(i) - y1(i))/r12^3 + (y3(i) - y1(i))/r13^3);
  Gm_mat(3,i) = ddx2(i) / ((x3(i) - x2(i))/r23^3 + (x1(i) - x2(i))/r12^3);
  Gm_mat(4,i) = ddy2(i) / ((y3(i) - y2(i))/r23^3 + (y1(i) - y2(i))/r12^3);
  Gm_mat(5,i) = ddx3(i) / ((x1(i) - x3(i))/r13^3 + (x2(i) - x3(i))/r23^3);
  Gm_mat(6,i) = ddy3(i) / ((x1(i) - x3(i))/r13^3 + (y2(i) - y3(i))/r23^3);
end

Gm_filtered = Gm_mat(:, 3:end-2);
Gm_filtered = Gm_filtered(Gm_filtered > 0.1 & Gm_filtered < 10);
Gm = mean(Gm_filtered);

for Gm = linspace(0.1,0.3,100)

%% RozwiÄ…zywanie

% Initial conditions
p0 = [x1(1); y1(1); x2(1); y2(1); x3(1); y3(1); 
      dx1(1); dy1(1); dx2(1); dy2(1); dx3(1); dy3(1); Gm];

% manual updates
p0(3) = p0(3) + 0.02;
p0(4) = p0(4) - 0.02;

p0(dx)

% Time span for the solution
tspan = t_vals; 

% Define the system of equations
odefun = @(t, z) ODEFUN(t, z);

% Solve using ode45
[T, z] = ode45(odefun, tspan, p0);

%fminsearch(@(p) crit(p,t,[x1,y1]), p0)

% Extract the positions and velocities for each body
x1_app = z(:, 1);
y1_app = z(:, 2);
vx1_app = z(:, 3);
vy1_app = z(:, 4);

x2_app = z(:, 3);
y2_app = z(:, 4);
vx2_app = z(:, 7);
vy2_app = z(:, 8);

x3_app = z(:, 5);
y3_app = z(:, 6);
vx3_app = z(:, 11);
vy3_app = z(:, 12);

% Plot the trajectories of the three bodies
figure(69);clf;
hold on;
plot(x1, y1, Color=c1); % Body 1
plot(x2, y2, Color=c2); % Body 2
plot(x3, y3, Color=c3); % Body 3
plot(x1(1),y1(1),Color=c1,DisplayName='Body 1 Start', ...
  Marker="*",MarkerSize=20)
plot(x2(1),y2(1),Color=c2,DisplayName='Body 2 Start', ...
  Marker="*",MarkerSize=20)
plot(x3(1),y3(1),Color=c3,DisplayName='Body 3 Start', ...
  Marker="*",MarkerSize=20)
plot(x1_app, y1_app, Color=c1); % Body 1
plot(x2_app, y2_app, Color=c2); % Body 2
plot(x3_app, y3_app, Color=c3); % Body 3
xlabel('x');
ylabel('y');
title('Three-Body Problem in 2D');
legend('Body 1', 'Body 2', 'Body 3');
axis equal;
grid on;
hold off;



end